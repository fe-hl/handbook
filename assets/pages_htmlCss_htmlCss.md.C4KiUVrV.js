import{_ as a,c as s,o as i,ao as e}from"./chunks/framework.DOhyS95j.js";const l="/handbook/assets/domtree.q---ranP.png",E=JSON.parse('{"title":"HTML/CSS 核心知识","description":"","frontmatter":{},"headers":[],"relativePath":"pages/htmlCss/htmlCss.md","filePath":"pages/htmlCss/htmlCss.md","lastUpdated":1748506554000}'),d={name:"pages/htmlCss/htmlCss.md"};function n(h,t,r,o,p,k){return i(),s("div",null,t[0]||(t[0]=[e('<h1 id="html-css-核心知识" tabindex="-1">HTML/CSS 核心知识 <a class="header-anchor" href="#html-css-核心知识" aria-label="Permalink to &quot;HTML/CSS 核心知识&quot;">​</a></h1><h2 id="html-渲染流程详解" tabindex="-1">HTML 渲染流程详解 <a class="header-anchor" href="#html-渲染流程详解" aria-label="Permalink to &quot;HTML 渲染流程详解&quot;">​</a></h2><p><img src="'+l+`" alt="DOM树结构示意图"><em>DOM 树与 CSSOM 树合并生成渲染树示意图</em></p><h3 id="_1-dom-树构建" tabindex="-1">1. DOM 树构建 <a class="header-anchor" href="#_1-dom-树构建" aria-label="Permalink to &quot;1. DOM 树构建&quot;">​</a></h3><ul><li>浏览器解析 HTML 文档，将标签转换为树形结构的<strong>DOM 节点</strong></li><li>每个 HTML 元素对应一个节点，包含属性和子节点关系</li></ul><h3 id="_2-cssom-树构建" tabindex="-1">2. CSSOM 树构建 <a class="header-anchor" href="#_2-cssom-树构建" aria-label="Permalink to &quot;2. CSSOM 树构建&quot;">​</a></h3><ul><li>解析 CSS 规则，构建样式对象模型（CSSOM）</li><li>包含样式继承关系和层叠规则</li></ul><h3 id="_3-渲染树生成-render-tree" tabindex="-1">3. 渲染树生成（Render Tree） <a class="header-anchor" href="#_3-渲染树生成-render-tree" aria-label="Permalink to &quot;3. 渲染树生成（Render Tree）&quot;">​</a></h3><ul><li>合并 DOM 和 CSSOM，仅保留可见节点</li><li>隐藏元素（<code>display:none</code>）不会出现在渲染树中</li></ul><h3 id="_4-布局阶段-layout-reflow" tabindex="-1">4. 布局阶段（Layout/Reflow） <a class="header-anchor" href="#_4-布局阶段-layout-reflow" aria-label="Permalink to &quot;4. 布局阶段（Layout/Reflow）&quot;">​</a></h3><ul><li>计算节点几何属性：位置、尺寸</li><li>处理 CSS 盒模型、浮动、定位等布局规则</li></ul><h3 id="_5-绘制阶段-paint" tabindex="-1">5. 绘制阶段（Paint） <a class="header-anchor" href="#_5-绘制阶段-paint" aria-label="Permalink to &quot;5. 绘制阶段（Paint）&quot;">​</a></h3><ul><li>将节点转换为屏幕像素</li><li>涉及文字渲染、背景绘制、边框绘制等操作</li></ul><h3 id="_6-合成与显示" tabindex="-1">6. 合成与显示 <a class="header-anchor" href="#_6-合成与显示" aria-label="Permalink to &quot;6. 合成与显示&quot;">​</a></h3><ul><li>通过 GPU 加速进行图层合成</li><li>触发硬件加速的属性：<code>transform</code>、<code>opacity</code>、<code>filter</code>等</li></ul><h3 id="_7-javascript-执行" tabindex="-1">7. JavaScript 执行 <a class="header-anchor" href="#_7-javascript-执行" aria-label="Permalink to &quot;7. JavaScript 执行&quot;">​</a></h3><ul><li>解析执行脚本可能修改 DOM/CSSOM</li><li>异步脚本通过<code>defer/async</code>优化加载</li></ul><h3 id="_8-资源加载" tabindex="-1">8. 资源加载 <a class="header-anchor" href="#_8-资源加载" aria-label="Permalink to &quot;8. 资源加载&quot;">​</a></h3><ul><li>解析过程中可能触发额外资源请求（CSS/JS/图片）</li></ul><h2 id="css-渲染阻塞机制" tabindex="-1">CSS 渲染阻塞机制 <a class="header-anchor" href="#css-渲染阻塞机制" aria-label="Permalink to &quot;CSS 渲染阻塞机制&quot;">​</a></h2><ul><li>🔄 并行构建：DOM 解析与 CSSOM 构建同时进行</li><li>⏸ 渲染阻塞：CSSOM 未完成时，渲染树生成被阻塞</li><li>📌 关键路径：优化 CSS 加载顺序可提升首屏渲染速度</li></ul><h2 id="显示控制对比表" tabindex="-1">显示控制对比表 <a class="header-anchor" href="#显示控制对比表" aria-label="Permalink to &quot;显示控制对比表&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性</th><th>占位情况</th><th>触发行为</th><th>性能影响</th></tr></thead><tbody><tr><td><code>display: none</code></td><td>❌ 不占位</td><td>回流(Reflow)</td><td>高</td></tr><tr><td><code>visibility:hidden</code></td><td>✅ 占位</td><td>重绘(Repaint)</td><td>中</td></tr></tbody></table><h2 id="盒模型深度解析" tabindex="-1">盒模型深度解析 <a class="header-anchor" href="#盒模型深度解析" aria-label="Permalink to &quot;盒模型深度解析&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 盒模型设置示例 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">content-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 默认W3C标准模型 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* box-sizing: border-box; IE传统模型 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="盒模型分类" tabindex="-1">盒模型分类 <a class="header-anchor" href="#盒模型分类" aria-label="Permalink to &quot;盒模型分类&quot;">​</a></h2><table tabindex="0"><thead><tr><th>模型类型</th><th>宽度计算规则</th></tr></thead><tbody><tr><td>content-box</td><td>width = 内容宽度</td></tr><tr><td>border-box</td><td>width = 内容宽度 + padding + border</td></tr><tr><td>padding-box</td><td>width = 内容宽度 + padding</td></tr><tr><td>margin-box</td><td>包含外边距的特殊模型（实验性）</td></tr></tbody></table><h2 id="响应式等高布局方案" tabindex="-1">响应式等高布局方案 <a class="header-anchor" href="#响应式等高布局方案" aria-label="Permalink to &quot;响应式等高布局方案&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 现代Flexbox方案 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stretch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 默认值，可省略 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="居中布局全攻略" tabindex="-1">居中布局全攻略 <a class="header-anchor" href="#居中布局全攻略" aria-label="Permalink to &quot;居中布局全攻略&quot;">​</a></h2><h3 id="水平居中方案" tabindex="-1">水平居中方案 <a class="header-anchor" href="#水平居中方案" aria-label="Permalink to &quot;水平居中方案&quot;">​</a></h3><table tabindex="0"><thead><tr><th>元素类型</th><th>实现方式</th></tr></thead><tbody><tr><td>行内元素</td><td><code>text-align: center</code> (父容器)</td></tr><tr><td>块级元素</td><td><code>margin: 0 auto</code></td></tr><tr><td>绝对定位元素</td><td><code>left:50% + transform:translateX(-50%)</code></td></tr><tr><td>Flex 布局</td><td><code>justify-content: center</code></td></tr></tbody></table><h3 id="垂直居中方案" tabindex="-1">垂直居中方案 <a class="header-anchor" href="#垂直居中方案" aria-label="Permalink to &quot;垂直居中方案&quot;">​</a></h3><table tabindex="0"><thead><tr><th>场景</th><th>实现方式</th></tr></thead><tbody><tr><td>单行文本</td><td><code>line-height: 容器高度</code></td></tr><tr><td>绝对定位元素</td><td><code>top:50% + transform:translateY(-50%)</code></td></tr><tr><td>Flex 布局</td><td><code>align-items: center</code></td></tr><tr><td>表格布局</td><td><code>display: table-cell + vertical-align: middle</code></td></tr></tbody></table><h3 id="完美居中方案" tabindex="-1">完美居中方案 <a class="header-anchor" href="#完美居中方案" aria-label="Permalink to &quot;完美居中方案&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Flex终极方案 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="选择器优先级矩阵" tabindex="-1">选择器优先级矩阵 <a class="header-anchor" href="#选择器优先级矩阵" aria-label="Permalink to &quot;选择器优先级矩阵&quot;">​</a></h2><table tabindex="0"><thead><tr><th>优先级顺序</th><th>示例</th><th>权重值</th></tr></thead><tbody><tr><td><code>!important</code> 声明</td><td><code>color: red !important</code></td><td>∞（最高）</td></tr><tr><td>内联样式</td><td><code>&lt;div style=&quot;...&quot;&gt;</code></td><td>1000</td></tr><tr><td>ID 选择器</td><td><code>#header</code></td><td>0100</td></tr><tr><td>类/属性/伪类选择器</td><td><code>.nav</code>, <code>:hover</code></td><td>0010</td></tr><tr><td>元素/伪元素选择器</td><td><code>div</code>, <code>::before</code></td><td>0001</td></tr><tr><td>继承样式</td><td>父元素属性继承</td><td>0000（最低）</td></tr></tbody></table><p>⚠️ 注意：选择器解析采用<strong>从右向左</strong>规则，优先匹配最右选择器</p><h2 id="元素类型特性表" tabindex="-1">元素类型特性表 <a class="header-anchor" href="#元素类型特性表" aria-label="Permalink to &quot;元素类型特性表&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>行内元素</th><th>块级元素</th></tr></thead><tbody><tr><td>宽度设置</td><td>❌ 无效</td><td>✅ 有效</td></tr><tr><td>上下外边距</td><td>❌ 无效</td><td>✅ 有效</td></tr><tr><td>水平排列</td><td>✅ 自动</td><td>❌ 独占一行</td></tr><tr><td>典型元素</td><td><code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code></td><td><code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code></td></tr></tbody></table><h2 id="bfc-深度解析" tabindex="-1">BFC 深度解析 <a class="header-anchor" href="#bfc-深度解析" aria-label="Permalink to &quot;BFC 深度解析&quot;">​</a></h2><h3 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h3><ol><li>🛡 隔离浮动：包含浮动元素，防止父容器高度塌陷</li><li>🚫 阻止外边距合并：解决相邻块级元素 margin 重叠问题</li><li>🔀 创建独立渲染区域：避免浮动元素覆盖</li></ol><h3 id="触发条件-满足其一即可" tabindex="-1">触发条件（满足其一即可） <a class="header-anchor" href="#触发条件-满足其一即可" aria-label="Permalink to &quot;触发条件（满足其一即可）&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 常见触发方式 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.bfc-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 浮动元素 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 绝对定位 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 行内块元素 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 非visible的overflow */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="浮动清除方案对比" tabindex="-1">浮动清除方案对比 <a class="header-anchor" href="#浮动清除方案对比" aria-label="Permalink to &quot;浮动清除方案对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>实现方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>空 div 法</td><td><code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></td><td>简单直观</td><td>产生冗余 HTML</td></tr><tr><td>父容器 overflow</td><td><code>overflow: auto/hidden</code></td><td>代码简洁</td><td>可能影响绝对定位元素</td></tr><tr><td>伪元素法</td><td><code>::after { content:&quot;&quot;; clear:both }</code></td><td>语义化好</td><td>需处理 IE6/7 兼容</td></tr><tr><td>创建 BFC</td><td><code>overflow: hidden</code></td><td>现代规范方案</td><td>可能隐藏溢出内容</td></tr><tr><td>固定高度</td><td><code>height: 200px</code></td><td>简单直接</td><td>缺乏响应式灵活性</td></tr></tbody></table><p>⚠️ 最佳实践：推荐伪元素法 + BFC 组合方案，兼顾现代浏览器与兼容性</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 触发BFC */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,50)]))}const g=a(d,[["render",n]]);export{E as __pageData,g as default};
