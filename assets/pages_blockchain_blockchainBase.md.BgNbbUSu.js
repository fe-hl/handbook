import{_ as i,c as a,o as n,ao as t}from"./chunks/framework.DOhyS95j.js";const g=JSON.parse('{"title":"区块链基础","description":"","frontmatter":{},"headers":[],"relativePath":"pages/blockchain/blockchainBase.md","filePath":"pages/blockchain/blockchainBase.md","lastUpdated":1753759076000}'),h={name:"pages/blockchain/blockchainBase.md"};function l(k,s,p,e,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="区块链基础" tabindex="-1">区块链基础 <a class="header-anchor" href="#区块链基础" aria-label="Permalink to &quot;区块链基础&quot;">​</a></h1><h2 id="一、为什么需要区块链-——-传统系统的四大痛点与区块链解法" tabindex="-1"><strong>一、为什么需要区块链？—— 传统系统的四大痛点与区块链解法</strong> <a class="header-anchor" href="#一、为什么需要区块链-——-传统系统的四大痛点与区块链解法" aria-label="Permalink to &quot;**一、为什么需要区块链？—— 传统系统的四大痛点与区块链解法**&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>痛点</strong></th><th><strong>传统系统问题</strong></th><th><strong>区块链解决方案</strong></th><th><strong>类比</strong></th></tr></thead><tbody><tr><td><strong>单点故障</strong></td><td>银行服务器宕机导致支付中断</td><td>分布式节点网络（7×24 小时运行）</td><td>多个备用水库 vs 单个大坝</td></tr><tr><td><strong>数据篡改</strong></td><td>管理员可后台修改数据库记录</td><td>哈希链+共识机制（需控制 51%节点）</td><td>防伪水印+多人监考</td></tr><tr><td><strong>中介成本高</strong></td><td>跨境支付手续费高达$50</td><td>点对点交易（比特币手续费&lt;$1）</td><td>跳过旅行社直订机票</td></tr><tr><td><strong>隐私泄露</strong></td><td>中心化数据库被黑客集中攻击</td><td>非对称加密（私钥用户自主保管）</td><td>保险箱钥匙自己拿 vs 交给物业保管</td></tr></tbody></table><p><strong>核心价值</strong>：<br> ▸ <strong>去信任化</strong>：无需依赖第三方机构<br> ▸ <strong>抗审查性</strong>：数据分布式存储，无单一控制点</p><h2 id="二、代码如何建立信任-——-智能合约的四大信任支柱" tabindex="-1"><strong>二、代码如何建立信任？—— 智能合约的四大信任支柱</strong> <a class="header-anchor" href="#二、代码如何建立信任-——-智能合约的四大信任支柱" aria-label="Permalink to &quot;**二、代码如何建立信任？—— 智能合约的四大信任支柱**&quot;">​</a></h2><ol><li><p><strong>代码开源验证</strong></p><ul><li>合约字节码公开（如 Etherscan 可查），全球开发者共同审计。</li><li><strong>类比</strong>：餐厅后厨透明化，顾客可实时监督烹饪过程。</li></ul></li><li><p><strong>确定性执行</strong></p><ul><li>所有节点通过 EVM（以太坊虚拟机）执行相同代码，结果完全一致。</li><li><strong>技术细节</strong>：字节码级复现，避免“我电脑显示不同”的纠纷。</li></ul></li><li><p><strong>防篡改存储</strong></p><ul><li>合约代码和状态写入区块链，修改需发起交易并支付手续费。</li><li><strong>安全门槛</strong>：51%攻击成本极高（参考下文攻击成本计算）。</li></ul></li><li><p><strong>自动触发机制</strong></p><ul><li>条件满足时自动执行（如时间戳、价格波动、投票结果）。</li><li><strong>现实映射</strong>：自动售货机投币后立即出货，无需人工干预。</li></ul></li></ol><p><strong>Solidity 合约安全示例（防重入攻击）</strong>：</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecureWithdrawal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balances;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> locked; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 锁标志，防止同一函数被重复调用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> withdraw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">locked, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Reentrancy guard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (1) 检查锁状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        locked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (2) 上锁，防止并发调用</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success, ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.call{value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount}(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (3) 发起转账</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(success, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Transfer failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (4) 确认转账结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        balances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (5) 清零余额</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        locked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (6) 解锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>代码逻辑</strong>：<br> 通过<code>locked</code>标志位实现互斥，避免攻击者利用回调函数重复提款（如 The DAO 事件）。</p><h2 id="三、去中心化网络是什么-——-从微信群到区块链的进化" tabindex="-1"><strong>三、去中心化网络是什么？—— 从微信群到区块链的进化</strong> <a class="header-anchor" href="#三、去中心化网络是什么-——-从微信群到区块链的进化" aria-label="Permalink to &quot;**三、去中心化网络是什么？—— 从微信群到区块链的进化**&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>场景</strong></th><th><strong>中心化模式</strong></th><th><strong>去中心化模式</strong></th><th><strong>优势</strong></th></tr></thead><tbody><tr><td><strong>消息传递</strong></td><td>微信群主转述（依赖服务器）</td><td>点对点广播（如 BitTorrent）</td><td>群主失联不影响消息存档</td></tr><tr><td><strong>文件存储</strong></td><td>百度网盘单点存储</td><td>IPFS 分布式存储</td><td>服务器故障不影响文件访问</td></tr><tr><td><strong>货币交易</strong></td><td>银行系统清算（T+1 到账）</td><td>区块链点对点转账（10 分钟确认）</td><td>实时到账，无中间商扣费</td></tr></tbody></table><p><strong>核心区别</strong>：<br> ▸ <strong>控制权转移</strong>：用户从“租用服务”变为“拥有数据主权”。<br> ▸ <strong>容错性提升</strong>：部分节点故障不影响整体网络运行。</p><h2 id="四、区块链结构怎么运作-——-带锁的日记本链" tabindex="-1"><strong>四、区块链结构怎么运作？—— 带锁的日记本链</strong> <a class="header-anchor" href="#四、区块链结构怎么运作-——-带锁的日记本链" aria-label="Permalink to &quot;**四、区块链结构怎么运作？—— 带锁的日记本链**&quot;">​</a></h2><ol><li><p><strong>区块结构</strong></p><ul><li><strong>数据层</strong>：记录交易（如“A 向 B 转账 1BTC”）。</li><li><strong>元数据</strong>：前区块哈希、时间戳、难度目标。</li><li><strong>类比</strong>：每页日记包含前页摘要，修改任一页会导致后续所有页指纹失效。</li></ul></li><li><p><strong>链式连接</strong></p><ul><li>每个区块头包含前区块的哈希值（如<code>Hash(Block N) = SHA256(Header)</code>）。</li><li><strong>篡改难度</strong>：修改任一区块需重新计算后续所有区块的哈希值（算力指数级增长）。</li></ul></li><li><p><strong>动态扩展</strong></p><ul><li>矿工竞争打包交易，生成新区块并链接到链尾。</li><li><strong>最长链原则</strong>：网络认可工作量最大的链为有效链（避免临时分叉）。</li></ul></li></ol><h2 id="五、非对称密码学是啥-——-私钥即主权" tabindex="-1"><strong>五、非对称密码学是啥？—— 私钥即主权</strong> <a class="header-anchor" href="#五、非对称密码学是啥-——-私钥即主权" aria-label="Permalink to &quot;**五、非对称密码学是啥？—— 私钥即主权**&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>概念</strong></th><th><strong>技术实现</strong></th><th><strong>现实映射</strong></th></tr></thead><tbody><tr><td><strong>私钥</strong></td><td>256 位随机数（如<code>3a7f...</code>）</td><td>保险箱钥匙（丢失则资产永久丢失）</td></tr><tr><td><strong>公钥</strong></td><td>私钥通过椭圆曲线算法生成</td><td>保险箱编号（公开，用于接收资产）</td></tr><tr><td><strong>数字签名</strong></td><td>私钥加密交易摘要</td><td>信封火漆印章（验证消息未被篡改）</td></tr></tbody></table><p><strong>安全原理</strong>：<br> ▸ <strong>不可逆性</strong>：通过公钥无法反推私钥（单向函数）。<br> ▸ <strong>唯一性</strong>：私钥与公钥一一对应，全球唯一。</p><h2 id="六、pow-共识机制——-算力即权力" tabindex="-1"><strong>六、POW 共识机制—— 算力即权力</strong> <a class="header-anchor" href="#六、pow-共识机制——-算力即权力" aria-label="Permalink to &quot;**六、POW 共识机制—— 算力即权力**&quot;">​</a></h2><ol><li><p><strong>核心流程</strong></p><ul><li><strong>矿工竞争</strong>：通过哈希碰撞（如<code>SHA256(Block Header + Nonce)</code>）寻找符合难度目标的随机数。</li><li><strong>中奖规则</strong>：哈希值前 N 位为 0（如比特币前 70 位为 0）。</li><li><strong>奖励机制</strong>：获胜矿工获得区块奖励（新币+交易手续费）。</li></ul></li><li><p><strong>难度调整</strong></p><ul><li><strong>目标</strong>：维持平均 10 分钟出块时间。</li><li><strong>机制</strong>：每 2016 个区块（约 2 周）根据前周期实际出块时间调整难度值。</li><li><strong>公式</strong>：<code>新难度 = 旧难度 × (实际时间 / 目标时间)</code>。</li></ul></li><li><p><strong>51%攻击成本（2023 年比特币）</strong></p><table tabindex="0"><thead><tr><th><strong>参数</strong></th><th><strong>值</strong></th></tr></thead><tbody><tr><td>全网算力</td><td>400 EH/s（4×10²⁰ 哈希/秒）</td></tr><tr><td>攻击所需算力</td><td>&gt;200 EH/s（控制 51%算力）</td></tr><tr><td>矿机成本</td><td>$50/TerraHash（1TH=10¹² 哈希/秒）</td></tr><tr><td>设备成本</td><td>200×10⁶ TH × $50 = <strong>$100 亿</strong></td></tr><tr><td>电力成本（每小时）</td><td>200 EH/s × 0.1kW/TH × $0.1/kWh = <strong>$200 万/小时</strong></td></tr></tbody></table></li></ol><p><strong>经济合理性</strong>：<br> 攻击成本远高于收益，且攻击会导致币价暴跌，形成天然威慑。</p><h2 id="七、现实场景秒懂——-区块链如何改变生活" tabindex="-1"><strong>七、现实场景秒懂—— 区块链如何改变生活？</strong> <a class="header-anchor" href="#七、现实场景秒懂——-区块链如何改变生活" aria-label="Permalink to &quot;**七、现实场景秒懂—— 区块链如何改变生活？**&quot;">​</a></h2><ol><li><p><strong>跨境汇款</strong></p><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>传统银行</strong></th><th><strong>区块链</strong></th></tr></thead><tbody><tr><td><strong>耗时</strong></td><td>3 天（多国银行中转）</td><td>10 分钟（点对点直达）</td></tr><tr><td><strong>费用</strong></td><td>$50 手续费</td><td>$1 手续费</td></tr><tr><td><strong>风险</strong></td><td>中转行扣款/汇率损失</td><td>直达无中间商</td></tr></tbody></table></li><li><p><strong>网购纠纷</strong></p><ul><li><strong>传统流程</strong>：<br> 买家投诉 → 平台介入 → 举证扯皮 → 耗时数周。</li><li><strong>区块链方案</strong>：<br> 智能合约自动执行：<div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (买家确认收货) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    releaseFunds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(卖家);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (超时未确认) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    refund</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(买家);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>优势</strong>：零人工干预，24 小时内自动结算。</li></ul></li></ol><h2 id="硬分叉与软分叉-区块链协议升级的双重路径" tabindex="-1">硬分叉与软分叉：区块链协议升级的双重路径 <a class="header-anchor" href="#硬分叉与软分叉-区块链协议升级的双重路径" aria-label="Permalink to &quot;硬分叉与软分叉：区块链协议升级的双重路径&quot;">​</a></h2><h3 id="一、核心定义与本质区别" tabindex="-1"><strong>一、核心定义与本质区别</strong> <a class="header-anchor" href="#一、核心定义与本质区别" aria-label="Permalink to &quot;**一、核心定义与本质区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>硬分叉（Hard Fork）</strong></th><th><strong>软分叉（Soft Fork）</strong></th></tr></thead><tbody><tr><td><strong>兼容性</strong></td><td>不兼容旧版本，旧节点拒绝新节点区块</td><td>向后兼容，旧节点接受新节点区块</td></tr><tr><td><strong>网络影响</strong></td><td>必然分裂为两条独立链（如 ETH/ETC、BTC/BCH）</td><td>保持单链，旧节点可能成为“孤儿区块”但链不分裂</td></tr><tr><td><strong>升级要求</strong></td><td>需所有节点强制升级，否则无法参与新链</td><td>允许部分节点升级，未升级节点仍可验证旧规则区块</td></tr><tr><td><strong>典型案例</strong></td><td>以太坊 DAO 事件分叉、比特币现金分叉</td><td>比特币 SegWit 升级、BIP-66 签名验证强化</td></tr></tbody></table><h3 id="二、技术实现与案例解析" tabindex="-1"><strong>二、技术实现与案例解析</strong> <a class="header-anchor" href="#二、技术实现与案例解析" aria-label="Permalink to &quot;**二、技术实现与案例解析**&quot;">​</a></h3><h4 id="_1-硬分叉-协议的根本性变更" tabindex="-1"><strong>1. 硬分叉：协议的根本性变更</strong> <a class="header-anchor" href="#_1-硬分叉-协议的根本性变更" aria-label="Permalink to &quot;**1. 硬分叉：协议的根本性变更**&quot;">​</a></h4><ul><li><strong>技术特征</strong>：<br> 修改区块或交易格式（如调整区块大小、改变共识算法），旧节点因规则不符拒绝新节点区块。</li><li><strong>经典案例</strong>： <ul><li><strong>以太坊 ETH/ETC 分叉</strong>：<br> 2016 年 The DAO 事件后，社区通过硬分叉回滚被盗资金，部分成员拒绝升级，形成两条链。<br><strong>结果</strong>：原链 ETC 保留，新链 ETH 成为主流。</li><li><strong>比特币 BTC/BCH 分叉</strong>：<br> 2017 年因扩容争议，支持大区块的矿工分叉出比特币现金（BCH）。<br><strong>结果</strong>：BTC 继续 1M 区块，BCH 采用 8M 区块。</li></ul></li></ul><h4 id="_2-软分叉-向后兼容的渐进式升级" tabindex="-1"><strong>2. 软分叉：向后兼容的渐进式升级</strong> <a class="header-anchor" href="#_2-软分叉-向后兼容的渐进式升级" aria-label="Permalink to &quot;**2. 软分叉：向后兼容的渐进式升级**&quot;">​</a></h4><ul><li><p><strong>技术特征</strong>：<br> 收紧规则（如限制区块格式），旧节点虽无法验证新功能，但接受新节点区块。</p></li><li><p><strong>经典案例</strong>：</p><ul><li><strong>比特币 SegWit 升级</strong>：<br> 2017 年通过软分叉实现交易签名与数据分离，提升区块容量至 4M（等效）。<br><strong>结果</strong>：未升级节点仍可验证旧格式交易，网络未分裂。</li><li><strong>BIP-66 签名验证</strong>：<br> 2015 年强化签名规则，未升级节点可能生成无效区块，但新节点拒绝其上链。<br><strong>结果</strong>：矿工逐步升级，旧规则区块被淘汰。</li></ul></li></ul><h2 id="挖矿模拟" tabindex="-1">挖矿模拟 <a class="header-anchor" href="#挖矿模拟" aria-label="Permalink to &quot;挖矿模拟&quot;">​</a></h2><ul><li>hash = sha256(交易数据 + 上一个区块的哈希值 + 随机数)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pow.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;crypto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 完整的挖矿模拟器代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mineBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">difficulty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">transactions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">previousHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(difficulty);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`开始挖矿，目标: 哈希值以 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 开头...\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 随机数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 哈希计算次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> startTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 挖矿开始时间</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hashCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blockHeader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transactions</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">previousHash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nonce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sha256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockHeader).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 检查哈希值是否符合难度要求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prefix)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> elapsedTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">成功挖到区块!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`尝试次数: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hashCount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`耗时: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elapsedTime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 秒\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Nonce: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nonce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`哈希值: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nonce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 每1000次更新一次状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hashCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">已尝试 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hashCount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 次哈希计算...\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 难度系数-多少位哈希值以0开头</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> difficulty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 交易数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transactions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice sends 1 BTC to Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上一个区块的哈希值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> previousHash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0000a8c0d36295638e8a4e9b45a3e3e9d3e8c7b1a3e8e8e8e8e8e8e8e8e8e8e8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mineBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(difficulty, transactions, previousHash).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;错误:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pow.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">开始挖矿，目标:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 哈希值以</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 000000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 开头...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">已尝试</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 49619000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 次哈希计算...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">成功挖到区块!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">尝试次数:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 49619265</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">耗时:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 74.62</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 秒</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nonce:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 49619264</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">哈希值:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 000000718f3ee008a8d7a76e21315d33f4a773f5339595fc0d5f21d4ad69e620</span></span></code></pre></div><h2 id="交易签名与验证" tabindex="-1">交易签名与验证 <a class="header-anchor" href="#交易签名与验证" aria-label="Permalink to &quot;交易签名与验证&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;crypto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 生成 RSA 密钥对</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 包含公钥和私钥的对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRSAKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKeyPairSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rsa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modulusLength: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2048</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    publicKeyEncoding: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;spki&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pem&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    privateKeyEncoding: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pkcs8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pem&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publicKey, privateKey };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 使用私钥对数据进行签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {*}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 要签名的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {*}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> privateKey</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 私钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 签名的十六进制表示</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sign</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SHA256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sign.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sign.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sign.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(privateKey, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 使用公钥验证签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {*}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 原始数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {*}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {*}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> publicKey</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 公钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 验证是否成功</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifySignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">signature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">publicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> verify</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createVerify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SHA256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  verify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  verify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> verify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publicKey, signature, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRSAKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello, World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, privateKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isValid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifySignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, signature, publicKey);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;签名验证结果:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, isValid);</span></span></code></pre></div>`,37)]))}const y=i(h,[["render",l]]);export{g as __pageData,y as default};
