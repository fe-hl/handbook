import{_ as i,c as a,o as t,ao as n}from"./chunks/framework.DOhyS95j.js";const E=JSON.parse('{"title":"JavaScript 核心概念深度解析","description":"","frontmatter":{},"headers":[],"relativePath":"pages/jsBase/eightLeggedEssay.md","filePath":"pages/jsBase/eightLeggedEssay.md"}'),h={name:"pages/jsBase/eightLeggedEssay.md"};function l(e,s,k,p,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="javascript-核心概念深度解析" tabindex="-1">JavaScript 核心概念深度解析 <a class="header-anchor" href="#javascript-核心概念深度解析" aria-label="Permalink to &quot;JavaScript 核心概念深度解析&quot;">​</a></h1><h2 id="静态作用域和动态作用域" tabindex="-1">静态作用域和动态作用域 <a class="header-anchor" href="#静态作用域和动态作用域" aria-label="Permalink to &quot;静态作用域和动态作用域&quot;">​</a></h2><ul><li>JavaScript 采用<strong>词法作用域</strong>（静态作用域），函数作用域在<strong>定义时</strong>就确定</li><li>动态作用域中，函数作用域在<strong>调用时</strong>才确定</li></ul><h2 id="执行上下文与变量对象" tabindex="-1">执行上下文与变量对象 <a class="header-anchor" href="#执行上下文与变量对象" aria-label="Permalink to &quot;执行上下文与变量对象&quot;">​</a></h2><p>当执行可执行代码时，会创建对应的<strong>执行上下文</strong>，包含三个核心属性：</p><ol><li>变量对象（VO）</li><li>作用域链</li><li>this</li></ol><h3 id="函数上下文" tabindex="-1">函数上下文 <a class="header-anchor" href="#函数上下文" aria-label="Permalink to &quot;函数上下文&quot;">​</a></h3><ul><li>函数上下文中使用<strong>活动对象（AO）</strong> 表示变量对象</li><li>AO 在进入函数上下文时创建，通过<code>arguments</code>属性初始化</li><li>AO 变化过程： <ol><li>进入执行上下文：添加形参、函数声明、变量声明</li><li>代码执行阶段：修改变量值</li></ol></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 进入执行上下文时AO：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  arguments: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c: reference to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码执行后AO：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  arguments: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c: reference to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  d: reference to FunctionExpression </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h2><ul><li>查找变量时从当前上下文的变量对象开始，沿父级执行上下文逐级查找</li><li>作用域链是由多个执行上下文的变量对象构成的链表</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // bar作用域链：[bar.AO, foo.AO, global.VO]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="函数参数传递" tabindex="-1">函数参数传递 <a class="header-anchor" href="#函数参数传递" aria-label="Permalink to &quot;函数参数传递&quot;">​</a></h2><ul><li>ECMAScript 中所有函数参数都是<strong>按值传递</strong></li><li>基本类型：传递值的副本</li><li>引用类型：传递引用的副本（共享传递）</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改引用副本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1（原对象未改变）</span></span></code></pre></div><h2 id="手写核心方法" tabindex="-1">手写核心方法 <a class="header-anchor" href="#手写核心方法" aria-label="Permalink to &quot;手写核心方法&quot;">​</a></h2><h3 id="实现-call" tabindex="-1">实现 call <a class="header-anchor" href="#实现-call" aria-label="Permalink to &quot;实现 call&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context.fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.fn;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="实现-bind" tabindex="-1">实现 bind <a class="header-anchor" href="#实现-bind" aria-label="Permalink to &quot;实现 bind&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myBind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="实现-new" tabindex="-1">实现 new <a class="header-anchor" href="#实现-new" aria-label="Permalink to &quot;实现 new&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myNew</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="ajax-vs-fetch" tabindex="-1">AJAX vs Fetch <a class="header-anchor" href="#ajax-vs-fetch" aria-label="Permalink to &quot;AJAX vs Fetch&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>AJAX (XMLHttpRequest)</th><th>Fetch</th></tr></thead><tbody><tr><td><strong>设计</strong></td><td>回调函数</td><td>Promise</td></tr><tr><td><strong>API 设计</strong></td><td>集中式</td><td>模块化（Request/Response/Headers）</td></tr><tr><td><strong>数据流</strong></td><td>不支持分块读取</td><td>支持 Stream 分块读取</td></tr><tr><td><strong>CORS</strong></td><td>需手动处理</td><td>默认不发送 cookies</td></tr></tbody></table><h2 id="let-底层实现" tabindex="-1">let 底层实现 <a class="header-anchor" href="#let-底层实现" aria-label="Permalink to &quot;let 底层实现&quot;">​</a></h2><ol><li><strong>编译阶段</strong>：扫描函数体，为 let 变量生成初始词法环境</li><li><strong>执行上下文</strong>：进入块级作用域创建新词法环境</li><li><strong>绑定变量值</strong>：运行时在词法环境中搜索变量</li><li><strong>块级作用域</strong>：创建子遮蔽环境实现作用域隔离</li></ol><h2 id="垃圾回收机制" tabindex="-1">垃圾回收机制 <a class="header-anchor" href="#垃圾回收机制" aria-label="Permalink to &quot;垃圾回收机制&quot;">​</a></h2><h3 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-label="Permalink to &quot;引用计数&quot;">​</a></h3><ul><li>优点：立即回收垃圾</li><li>缺点：循环引用问题，计数器占用空间</li></ul><h3 id="标记清除" tabindex="-1">标记清除 <a class="header-anchor" href="#标记清除" aria-label="Permalink to &quot;标记清除&quot;">​</a></h3><ol><li>标记所有对象为垃圾（0）</li><li>从根对象遍历，标记可达对象（1）</li><li>清除标记为 0 的对象</li></ol><ul><li>优点：实现简单</li><li>缺点：内存碎片</li></ul><h3 id="分代回收" tabindex="-1">分代回收 <a class="header-anchor" href="#分代回收" aria-label="Permalink to &quot;分代回收&quot;">​</a></h3><ul><li><strong>新生代</strong>：新创建对象，回收频率高</li><li><strong>老生代</strong>：长期存活对象，回收频率低</li></ul><h2 id="函数式编程核心" tabindex="-1">函数式编程核心 <a class="header-anchor" href="#函数式编程核心" aria-label="Permalink to &quot;函数式编程核心&quot;">​</a></h2><ol><li><strong>纯函数</strong>：相同输入 =&gt; 相同输出，无副作用<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>不可变性</strong>：数据创建后不可修改<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr, newItem];</span></span></code></pre></div></li><li><strong>高阶函数</strong>：函数作为参数或返回值<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiplier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>函数组合</strong>：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func1, func2, func3);</span></span></code></pre></div></li></ol><h2 id="发布订阅-vs-观察者模式" tabindex="-1">发布订阅 vs 观察者模式 <a class="header-anchor" href="#发布订阅-vs-观察者模式" aria-label="Permalink to &quot;发布订阅 vs 观察者模式&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>发布订阅</th><th>观察者</th></tr></thead><tbody><tr><td><strong>耦合度</strong></td><td>完全解耦</td><td>相互耦合</td></tr><tr><td><strong>通信方式</strong></td><td>消息通道</td><td>直接调用</td></tr><tr><td><strong>扩展性</strong></td><td>高（多发布/订阅者）</td><td>低</td></tr></tbody></table><h2 id="精度丢失问题" tabindex="-1">精度丢失问题 <a class="header-anchor" href="#精度丢失问题" aria-label="Permalink to &quot;精度丢失问题&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9007199254740991</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 精度丢失</span></span></code></pre></div><p>原因：浮点数二进制表示存在近似值</p><h2 id="weakmap-vs-map" tabindex="-1">WeakMap vs Map <a class="header-anchor" href="#weakmap-vs-map" aria-label="Permalink to &quot;WeakMap vs Map&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>WeakMap</th><th>Map</th></tr></thead><tbody><tr><td><strong>Key 类型</strong></td><td>仅对象</td><td>任意值</td></tr><tr><td><strong>引用类型</strong></td><td>弱引用</td><td>强引用</td></tr><tr><td><strong>垃圾回收</strong></td><td>自动回收</td><td>不回收</td></tr><tr><td><strong>可枚举</strong></td><td>否</td><td>是</td></tr></tbody></table><h2 id="小程序双线程架构" tabindex="-1">小程序双线程架构 <a class="header-anchor" href="#小程序双线程架构" aria-label="Permalink to &quot;小程序双线程架构&quot;">​</a></h2><ul><li><strong>渲染层</strong>：WebView 渲染界面</li><li><strong>逻辑层</strong>：JsCore 线程运行 JS 脚本 优势：避免 JS 执行阻塞渲染</li></ul><h2 id="前端工程化核心" tabindex="-1">前端工程化核心 <a class="header-anchor" href="#前端工程化核心" aria-label="Permalink to &quot;前端工程化核心&quot;">​</a></h2><ol><li><strong>模块化</strong>：代码按功能划分</li><li><strong>规范化</strong>：统一代码风格</li><li><strong>自动化</strong>：构建/测试/部署</li><li><strong>组件化</strong>：高复用 UI 组件</li></ol><h2 id="重绘-vs-回流" tabindex="-1">重绘 vs 回流 <a class="header-anchor" href="#重绘-vs-回流" aria-label="Permalink to &quot;重绘 vs 回流&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th>重绘</th><th>回流</th></tr></thead><tbody><tr><td><strong>触发条件</strong></td><td>外观变化</td><td>布局变化</td></tr><tr><td><strong>性能影响</strong></td><td>较小</td><td>较大</td></tr><tr><td><strong>优化建议</strong></td><td>避免频繁样式修改</td><td>批量 DOM 操作</td></tr></tbody></table><h2 id="settimeout-vs-requestanimationframe" tabindex="-1">setTimeout vs requestAnimationFrame <a class="header-anchor" href="#settimeout-vs-requestanimationframe" aria-label="Permalink to &quot;setTimeout vs requestAnimationFrame&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th>setTimeout</th><th>requestAnimationFrame</th></tr></thead><tbody><tr><td><strong>执行时机</strong></td><td>指定时间后</td><td>下一帧开始前</td></tr><tr><td><strong>主线程</strong></td><td>阻塞</td><td>不阻塞</td></tr><tr><td><strong>后台运行</strong></td><td>继续执行</td><td>暂停</td></tr><tr><td><strong>适用场景</strong></td><td>通用定时</td><td>动画优化</td></tr></tbody></table><h2 id="script-加载策略" tabindex="-1">script 加载策略 <a class="header-anchor" href="#script-加载策略" aria-label="Permalink to &quot;script 加载策略&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th>正常加载</th><th>async</th><th>defer</th></tr></thead><tbody><tr><td><strong>HTML 解析</strong></td><td>暂停</td><td>并行</td><td>并行</td></tr><tr><td><strong>执行顺序</strong></td><td>顺序执行</td><td>下载完立即执行</td><td>HTML 解析完后顺序执行</td></tr><tr><td><strong>使用建议</strong></td><td>-</td><td>独立脚本</td><td>依赖 DOM 的脚本</td></tr></tbody></table><h2 id="内存泄漏场景" tabindex="-1">内存泄漏场景 <a class="header-anchor" href="#内存泄漏场景" aria-label="Permalink to &quot;内存泄漏场景&quot;">​</a></h2><ol><li><strong>意外全局变量</strong><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> leak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;leak&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>未清除定时器</strong><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><strong>DOM 引用未释放</strong><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未在不需要时解除引用</span></span></code></pre></div></li><li><strong>闭包滥用</strong><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bigData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigData.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="vite-为何启动快" tabindex="-1">Vite 为何启动快 <a class="header-anchor" href="#vite-为何启动快" aria-label="Permalink to &quot;Vite 为何启动快&quot;">​</a></h2><ul><li><strong>开发环境</strong>：直接使用 ES6 Module，无需打包</li><li><strong>按需编译</strong>：仅编译当前请求的模块</li><li><strong>Esbuild 预构建</strong>：极速的依赖预构建</li></ul><h2 id="vue-vs-react-对比" tabindex="-1">Vue vs React 对比 <a class="header-anchor" href="#vue-vs-react-对比" aria-label="Permalink to &quot;Vue vs React 对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th>Vue</th><th>React</th></tr></thead><tbody><tr><td><strong>模板系统</strong></td><td>基于 HTML 的模板</td><td>JSX</td></tr><tr><td><strong>更新粒度</strong></td><td>组件级</td><td>从根节点调度</td></tr><tr><td><strong>响应式</strong></td><td>Proxy 拦截</td><td>setState 触发</td></tr><tr><td><strong>渲染方式</strong></td><td>递归</td><td>可中断循环</td></tr></tbody></table><h2 id="模块化概念" tabindex="-1">模块化概念 <a class="header-anchor" href="#模块化概念" aria-label="Permalink to &quot;模块化概念&quot;">​</a></h2><table tabindex="0"><thead><tr><th>术语</th><th>含义</th></tr></thead><tbody><tr><td><strong>Module</strong></td><td>源码文件（webpack 中一切皆模块）</td></tr><tr><td><strong>Chunk</strong></td><td>多个模块合并（entry/import/splitChunk）</td></tr><tr><td><strong>Bundle</strong></td><td>最终输出文件</td></tr></tbody></table><h2 id="前端打包必要性" tabindex="-1">前端打包必要性 <a class="header-anchor" href="#前端打包必要性" aria-label="Permalink to &quot;前端打包必要性&quot;">​</a></h2><ol><li><strong>性能优化</strong>：Tree-Shaking/压缩/合并</li><li><strong>语法转换</strong>：TS/ES6+/SCSS → 浏览器兼容</li><li><strong>工程能力</strong>：Lint/测试/CI/CD 集成</li></ol><h2 id="开发环境标识" tabindex="-1">开发环境标识 <a class="header-anchor" href="#开发环境标识" aria-label="Permalink to &quot;开发环境标识&quot;">​</a></h2><table tabindex="0"><thead><tr><th>环境</th><th>全称</th><th>用途</th></tr></thead><tbody><tr><td><strong>DEV</strong></td><td>Development</td><td>开发</td></tr><tr><td><strong>SIT</strong></td><td>System Integration Test</td><td>系统整合测试</td></tr><tr><td><strong>UAT</strong></td><td>User Acceptance Test</td><td>用户验收测试</td></tr><tr><td><strong>PROD</strong></td><td>Production</td><td>生产环境</td></tr></tbody></table><h2 id="循环方法对比" tabindex="-1">循环方法对比 <a class="header-anchor" href="#循环方法对比" aria-label="Permalink to &quot;循环方法对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>可中断</th><th>遍历内容</th><th>适用对象</th></tr></thead><tbody><tr><td><code>forEach</code></td><td>❌</td><td>值</td><td>Array</td></tr><tr><td><code>for...in</code></td><td>✅</td><td>键</td><td>Object/Array</td></tr><tr><td><code>for...of</code></td><td>✅</td><td>值</td><td>Array/Map/Set</td></tr></tbody></table><h2 id="数据类型细节" tabindex="-1">数据类型细节 <a class="header-anchor" href="#数据类型细节" aria-label="Permalink to &quot;数据类型细节&quot;">​</a></h2><ul><li><code>undefined</code>：变量声明但未初始化</li><li><code>null</code>：空对象指针</li></ul><h2 id="递减操作符" tabindex="-1">递减操作符 <a class="header-anchor" href="#递减操作符" aria-label="Permalink to &quot;递减操作符&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b=7, a=4（先计算后递减）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a=3, c=5（先递减后计算）</span></span></code></pre></div>`,71)]))}const o=i(h,[["render",l]]);export{E as __pageData,o as default};
