import{_ as s,c as a,o as l,O as n}from"./chunks/framework.a45091be.js";const o="/handbook/assets/01.9d8849c8.png",A=JSON.parse('{"title":"js数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"pages/jsBase/dataType.md","lastUpdated":1696770222000}'),e={name:"pages/jsBase/dataType.md"},p=n(`<h1 id="js数据类型" tabindex="-1">js数据类型 <a class="header-anchor" href="#js数据类型" aria-label="Permalink to &quot;js数据类型&quot;">​</a></h1><h2 id="数据类型种类" tabindex="-1">数据类型种类 <a class="header-anchor" href="#数据类型种类" aria-label="Permalink to &quot;数据类型种类&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JS 中有8种数据类型</p></div><ul><li>七种基本数据类型 <code>Boolean</code> <code>Null</code> <code>Undefined</code> <code>Number</code> <code>String</code> <code>Symbol</code> <code>bigInt</code></li><li>一种引用类型 <code>object</code> <code>{} [] /^$/ new Date() Math function</code></li></ul><h2 id="typeof关键字" tabindex="-1">typeof关键字 <a class="header-anchor" href="#typeof关键字" aria-label="Permalink to &quot;typeof关键字&quot;">​</a></h2><ul><li>typeof 返回的都是字符串</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> a </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zhufeng</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// boolean</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// symbol</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//function</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zhufeng</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//object</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//object</span></span></code></pre></div><h2 id="typeof-null-等于object-为什么不修复" tabindex="-1">typeof null 等于object，为什么不修复？ <a class="header-anchor" href="#typeof-null-等于object-为什么不修复" aria-label="Permalink to &quot;typeof null 等于object，为什么不修复？&quot;">​</a></h2><ul><li>javascript 在设计之初的遗留问题</li><li>因为目前很多程序、 js 库都有这个逻辑判断、修复后会给程序带来很多问题</li></ul><h2 id="null-和-undefined-区别" tabindex="-1">null 和 undefined 区别？ <a class="header-anchor" href="#null-和-undefined-区别" aria-label="Permalink to &quot;null 和 undefined 区别？&quot;">​</a></h2><ul><li>null 和 undefined 都代表空，主要区别在于 undefined 表示<code>尚未初始化的变量的值</code>，而 null 表示该变量指向<code>空地址</code>。</li><li>在加法操作时，隐式类型转换不同，<code>null会转换成0</code> <code>undefined会转换成NaN</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+undefined</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+null</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0</span></span></code></pre></div><h2 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h2><ul><li>引用类型是指向一个内存地址</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果有赋值关系，当其中一个属性发生变化，会影响其他的值</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">username</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hulei</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b) </span><span style="color:#676E95;font-style:italic;">// {username:&#39;hulei&#39;,age:20}</span></span></code></pre></div><p><img src="`+o+`" alt="引用类型"></p><h2 id="内存区域" tabindex="-1">内存区域 <a class="header-anchor" href="#内存区域" aria-label="Permalink to &quot;内存区域&quot;">​</a></h2><ul><li><p>程序运行的时候，需要内存空间存放数据。一般来说,系统会划分出两种不同的内存空间：一种叫做 stack(栈)，另一种叫做 heap(堆)</p><ul><li>1、stack(栈)是有结构的，每个区块按照一定次序存放，可以明确知道每个区块的大小</li><li>2、 heap(堆)是没有结构的，数据可以任意存放。因此，stack 的寻址速度要快于 heap</li></ul></li><li><p>基本数据类型，一般都存放在 stack 里面，对象引用类型 一般都存放在 heap 里面</p></li></ul><h2 id="var-let-const" tabindex="-1">var&amp;let&amp;const <a class="header-anchor" href="#var-let-const" aria-label="Permalink to &quot;var&amp;let&amp;const&quot;">​</a></h2><ul><li><code>var</code> 定义的变量<code>没有块的概念</code>,<code>可以跨块访问</code>,<code>不能跨函数访问</code>,<code>有变量提升</code>,<code>可重复声明</code></li><li><code>let</code>、<code>const</code> 定义的变量，<code>只能在块作用域里访问</code>，<code>不能跨块访问</code>，<code>也不能跨函数访问</code>，<code>不存在变量提升</code>，<code>不可以重复声明</code>,如果有重复变量 let 会在编译阶段报错</li><li><code>let</code>、<code>const</code> 不会挂载到window属性上，var会</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ES5问题?</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在if或者for循环中声明的变量会变成全局变量</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(i)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//5</span></span></code></pre></div><h2 id="暂时性死区" tabindex="-1">暂时性死区 <a class="header-anchor" href="#暂时性死区" aria-label="Permalink to &quot;暂时性死区&quot;">​</a></h2><ul><li>从一个<code>代码块</code>的开始直到<code>代码执行到声明变量的行之前</code>，let 或const 声明的变量都处于<code>暂时性死区</code>(Temporal dead zone，TDZ)中</li><li>当变量处于<code>暂时性死区之中</code>时，其尚未被初始化，尝试访问变量将抛出 ReferenceError。当代码执行到声明变量所在的行时，变量被初始化为一个值。如果声明中未指定初始值，则变量将被初始化为 undefined</li><li>var声明的变量不同，如果在声明前访问了变量，交量将会返回 undefined 。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Uncaught ReferenceError: b is not defined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b) </span><span style="color:#676E95;font-style:italic;">// 暂时性死区(Temporal dead zone，TDZ)中</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,25),t=[p];function c(r,y,i,D,C,F){return l(),a("div",null,t)}const u=s(e,[["render",c]]);export{A as __pageData,u as default};
