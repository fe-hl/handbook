import{_ as s,c as a,o as n,O as l}from"./chunks/framework.a45091be.js";const C=JSON.parse('{"title":"闭包","description":"","frontmatter":{},"headers":[],"relativePath":"pages/jsBase/scope.md","lastUpdated":1700272670000}'),p={name:"pages/jsBase/scope.md"},o=l(`<h1 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h1><h2 id="什么是闭包" tabindex="-1">什么是闭包 <a class="header-anchor" href="#什么是闭包" aria-label="Permalink to &quot;什么是闭包&quot;">​</a></h2><ul><li><p>闭包：函数运行的一种机制</p></li><li><p>函数执行会形成一个<code>私有上下文</code>，如果上下文中的某些<code>变量</code>(一般指的是堆内存地址)<code>被上下文以外的一些事物</code>所引用，导致当前上下文不能被出栈释放形成闭包</p></li><li><p>保护：保护私有上下文中的“私有变量”和外界互不影响</p></li><li><p>保存：上下文不被释放，那么上下文中的”私有变量”和”值”都会被保存起来，可以供其下级上下文中使用</p></li><li><p>弊端：如果大量使用闭包，会导致栈内存太大，页面渲染变慢，性能受到影响，所以真实项目中需要“合理应用闭包”；某些代码会导致栈溢出或者内存泄漏，这些操作都是需要我们注意的；</p></li><li><p>1、把函数作为参数传递</p></li><li><p>2、返回一个函数</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 返回一个函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">closure1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 把函数作为参数传递</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">closure2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">closure1</span><span style="color:#A6ACCD;">()()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">closure2</span><span style="color:#A6ACCD;">(fn)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="闭包使用场景" tabindex="-1">闭包使用场景 <a class="header-anchor" href="#闭包使用场景" aria-label="Permalink to &quot;闭包使用场景&quot;">​</a></h2><ul><li>防抖、截流函</li><li>Vue2 响应式 dep</li><li>react Hooks</li></ul><h2 id="闭包的内存泄漏" tabindex="-1">闭包的内存泄漏 <a class="header-anchor" href="#闭包的内存泄漏" aria-label="Permalink to &quot;闭包的内存泄漏&quot;">​</a></h2><ul><li>闭包一般情况不会造成内存泄漏，但是闭包内的引用是无法被垃圾回收的。</li></ul>`,8),e=[o];function t(c,r,F,y,i,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
