import{_ as i,c as a,o as t,ao as l}from"./chunks/framework.DOhyS95j.js";const o=JSON.parse('{"title":"第二章｜HTML中的JavaScript","description":"记录JavaScript高级程序设计的学习过程","frontmatter":{"title":"第二章｜HTML中的JavaScript","description":"记录JavaScript高级程序设计的学习过程"},"headers":[],"relativePath":"pages/advancedProgramming/chapterTwo.md","filePath":"pages/advancedProgramming/chapterTwo.md","lastUpdated":1742733842000}'),n={name:"pages/advancedProgramming/chapterTwo.md"};function e(p,s,h,k,r,d){return t(),a("div",null,s[0]||(s[0]=[l(`<h2 id="script元素" tabindex="-1">script元素 <a class="header-anchor" href="#script元素" aria-label="Permalink to &quot;script元素&quot;">​</a></h2><ul><li>script元素可以包含在head元素中，也可以包含在body元素中，默认情况下是script<code>同步加载</code>、<code>同步执行</code>，等待执行完毕后，后面的才能开始执行</li></ul><h2 id="script-src遇上内联代码" tabindex="-1">script src遇上内联代码 <a class="header-anchor" href="#script-src遇上内联代码" aria-label="Permalink to &quot;script src遇上内联代码&quot;">​</a></h2><ul><li>如果有script标记有src属性，script开始到结束标签<code>内部的代码不会执行</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// demo.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.log(&quot;Hello World!&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：demo</span></span></code></pre></div><h2 id="script异步加载" tabindex="-1">script异步加载 <a class="header-anchor" href="#script异步加载" aria-label="Permalink to &quot;script异步加载&quot;">​</a></h2><ul><li>defer属性，可以让script元素<code>异步加载</code>、加载完成后<code>不会立马执行</code>，这个脚本会等待<code>整个页面解析之后</code>在运用，并且在<code>DOMContentLoaded</code>事件之前执行，如有多个defer加载的脚本会按照<code>加载顺序依次执行</code></li><li>适合于<code>多个脚本</code>的<code>顺序加载</code>，需要操作<code>DOM</code>的情况</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比如说example1.js加载5秒种，example2.js加载2秒钟</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// example2会等待example1加载完并且执行后，在执行example2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example1.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example2.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>async属性，可以让script元素<code>异步加载</code>、加载完成后<code>立马执行</code>这个脚本，如有多个async加载的脚本无法保证他们的执行顺序</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如有多个async加载的脚本无法保证他们的执行顺序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example1.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example2.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="noscript标签" tabindex="-1">noscript标签 <a class="header-anchor" href="#noscript标签" aria-label="Permalink to &quot;noscript标签&quot;">​</a></h2><ul><li>noscript标签，当浏览器不支持script标签时，会显示noscript标签内的内容</li></ul>`,12)]))}const E=i(n,[["render",e]]);export{o as __pageData,E as default};
