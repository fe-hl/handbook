import{_ as t,c as l,o as e,ao as a}from"./chunks/framework.DOhyS95j.js";const o="/handbook/assets/git-a.BE8rg3ga.png",r="/handbook/assets/git-b.Cbr_sIiS.png",b=JSON.parse('{"title":"Git 管理","description":"","frontmatter":{},"headers":[],"relativePath":"pages/git.md","filePath":"pages/git.md","lastUpdated":1728883592000}'),c={name:"pages/git.md"};function g(m,i,s,u,h,d){return e(),l("div",null,i[0]||(i[0]=[a('<h1 id="git-管理" tabindex="-1">Git 管理 <a class="header-anchor" href="#git-管理" aria-label="Permalink to &quot;Git 管理&quot;">​</a></h1><h2 id="git-分支命名规范" tabindex="-1">Git 分支命名规范 <a class="header-anchor" href="#git-分支命名规范" aria-label="Permalink to &quot;Git 分支命名规范&quot;">​</a></h2><ul><li>master 永远是可用的稳定版本</li><li>develop(dev) 正在测试但未上线的版本</li><li>feature(feat)/xxx 功能和特性版本</li><li>hotfix(fix)/xxx 紧急的 Bug</li></ul><h2 id="git-commit-规范" tabindex="-1">Git commit 规范 <a class="header-anchor" href="#git-commit-规范" aria-label="Permalink to &quot;Git commit 规范&quot;">​</a></h2><ul><li>feat: 新增 feature</li><li>fix: 修复 bug</li><li>docs: 仅仅修改了文档，如 readme.md</li><li>style: 仅仅是对格式进行修改，如逗号、缩进、空格等。不改变代码逻辑。</li><li>refactor: 代码重构，没有新增功能或修复 bug</li><li>perf: 优化相关，如提升性能、用户体验等。</li><li>test: 测试用例，包括单元测试、集成测试。</li><li>chore: 改变构建流程、或者增加依赖库、工具等。</li><li>revert: 版本回滚</li></ul><h2 id="git-基本命令" tabindex="-1">Git 基本命令 <a class="header-anchor" href="#git-基本命令" aria-label="Permalink to &quot;Git 基本命令&quot;">​</a></h2><ul><li>git 基本命令</li><li>git add &lt;文件&gt; 添加暂存</li><li>git status -s 查看文件暂存状态</li><li>git commit -m “注释” 需要暂存,提交</li><li>git commit -am “注释” 不需要暂存,直接提交</li><li>git push 上传本地文件到远程</li><li>git pull 拉取远程到本地</li><li>git push origin dev 本地分支上传的远程</li><li>git push origin --delete dev 删除远程分支</li><li>git branch 查看本地分支</li><li>git branch -D dev 删除本地分支</li><li>git branch -a //查看本地远程分支</li><li>git branch feature/xxx 创建新分支</li><li>git checkout feature/xxx //切换分支</li><li>git fetch 更新拉取分支</li><li>git log -p -10 查看提交记录</li><li>git diff 可以查看当前没有 add 的内容修改（不在暂存的文件变化）</li><li>git diff --cached 查看已经 add 但没有 commit 的改动（在暂存的文件变化）</li><li>git diff HEAD 是上面两条命令的合并</li><li>git reset HEAD src/xx/xx 取消暂存</li><li>git checkout src/xx/xx 重置修改的文件(需要取消暂存)</li><li>git merge hotfix 合并分支</li><li>git reset --hard commit-id :回滚到 commit-id</li><li>git reset --hard HEAD~3：将最近 3 次的提交回滚</li><li>git fetch --all 拉取最新的</li><li>git reset --hard origin/master 用远程覆盖本地</li><li>git stash 拉别人代码前暂存</li><li>git stash pop 释放暂时</li><li>git rm -r --cached components.d.ts 忽略已经提交的文件</li></ul><h2 id="git-版本回退" tabindex="-1">Git 版本回退 <a class="header-anchor" href="#git-版本回退" aria-label="Permalink to &quot;Git 版本回退&quot;">​</a></h2><ul><li><ol><li>git log <blockquote><p>commit id 和 commit message</p></blockquote></li></ol></li><li><ol start="2"><li>git reset --hard id <blockquote><p>根据 commit id 回退到指定的版本(退回这个版本，废除这次提交)</p></blockquote></li></ol></li><li><ol start="3"><li><p>git push origin --force</p><blockquote><p>推送到本地到远程仓库：让远程仓库代码和你本地一样，到当前你本地的版本。</p></blockquote><blockquote><p>这个时候突然又发现不需要回退了，刚才那些消失的代码又要重新找回来了，别担心，咱们 Git 强大着呢！</p></blockquote></li></ol></li><li><ol start="4"><li><p>git reflog</p><blockquote><p>定义：查看命令操作的历史</p></blockquote><blockquote><p>查找到你要的 操作 id，依旧使用 上文说的 git reset --hard id。又回退到当初一模一样的版本啰！</p></blockquote></li></ol></li></ul><h2 id="git-commit-后如何撤销" tabindex="-1">Git commit 后如何撤销 <a class="header-anchor" href="#git-commit-后如何撤销" aria-label="Permalink to &quot;Git commit 后如何撤销&quot;">​</a></h2><blockquote><p>不删除工作空间修改过的代码，仅撤销 commit</p></blockquote><ul><li>git reset --soft HEAD^</li></ul><blockquote><p>删除工作空间修改过的代码，撤销 commit&amp;撤销 add</p></blockquote><ul><li>git reset --hard HEAD^</li></ul><h2 id="git冲突后取消merge" tabindex="-1">Git冲突后取消merge <a class="header-anchor" href="#git冲突后取消merge" aria-label="Permalink to &quot;Git冲突后取消merge&quot;">​</a></h2><blockquote><p>分支merge有冲突，取消merge</p></blockquote><ul><li>git merge --abort</li></ul><h2 id="git取消记录合并" tabindex="-1">git取消记录合并 <a class="header-anchor" href="#git取消记录合并" aria-label="Permalink to &quot;git取消记录合并&quot;">​</a></h2><ul><li><ol><li>git log</li></ol><blockquote><p>commit id 和 commit message</p></blockquote></li><li><ol start="2"><li>git revert commitId</li></ol><blockquote><p>使用git revert撤销合并</p></blockquote></li></ul><h2 id="git取消某次合并" tabindex="-1">git取消某次合并 <a class="header-anchor" href="#git取消某次合并" aria-label="Permalink to &quot;git取消某次合并&quot;">​</a></h2><ul><li><ol><li>git log</li></ol><blockquote><p>commit id 和 commit message</p></blockquote></li><li><ol start="2"><li>git reset commitId</li></ol><blockquote><p>使用git reset取消合并</p></blockquote></li></ul><h2 id="查看当前分支是从哪个分支checkout出来的" tabindex="-1">查看当前分支是从哪个分支checkout出来的 <a class="header-anchor" href="#查看当前分支是从哪个分支checkout出来的" aria-label="Permalink to &quot;查看当前分支是从哪个分支checkout出来的&quot;">​</a></h2><ul><li>git reflog show --date=local | grep 分支名称</li></ul><blockquote><p>checkout: moving from master to 16069 16069分支是从mastercheckout出来的</p></blockquote><h2 id="git中rebase和merge的区别是什么" tabindex="-1">git中rebase和merge的区别是什么 <a class="header-anchor" href="#git中rebase和merge的区别是什么" aria-label="Permalink to &quot;git中rebase和merge的区别是什么&quot;">​</a></h2><ul><li>1、rebase把当前的commit放到公共分支的最后面，merge把当前的commit和公共分支合并在一起</li><li>2、用merge命令解决完冲突后会产生一个commit，而用rebase命令解决完冲突后不会产生额外的commit</li></ul><h2 id="git-分支-a-方案版" tabindex="-1">Git 分支 A 方案版 <a class="header-anchor" href="#git-分支-a-方案版" aria-label="Permalink to &quot;Git 分支 A 方案版&quot;">​</a></h2><p><img src="'+o+'" alt="eventLoop"></p><h2 id="git-分支-b-方案版" tabindex="-1">Git 分支 B 方案版 <a class="header-anchor" href="#git-分支-b-方案版" aria-label="Permalink to &quot;Git 分支 B 方案版&quot;">​</a></h2><p><img src="'+r+'" alt="eventLoop"></p>',30)]))}const p=t(c,[["render",g]]);export{b as __pageData,p as default};
