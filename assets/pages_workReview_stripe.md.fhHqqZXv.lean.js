import{_ as i,c as a,ao as n,o as e}from"./chunks/framework.BbYUXk_8.js";const o=JSON.parse('{"title":"stripe支付体检优化","description":"","frontmatter":{},"headers":[],"relativePath":"pages/workReview/stripe.md","filePath":"pages/workReview/stripe.md","lastUpdated":1708507906000}'),l={name:"pages/workReview/stripe.md"};function t(h,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="stripe支付体检优化" tabindex="-1">stripe支付体检优化 <a class="header-anchor" href="#stripe支付体检优化" aria-label="Permalink to &quot;stripe支付体检优化&quot;">​</a></h1><h2 id="业务痛点" tabindex="-1">业务痛点 <a class="header-anchor" href="#业务痛点" aria-label="Permalink to &quot;业务痛点&quot;">​</a></h2><ul><li>三方支付采用的是stripe，支付时需要在Stripe页面完成支付，支付完成后用户再次回到当前页面，会导致当前页面的刷新，用户体验不好，甚至会中断用户的操作流程</li><li>利用BroadcastChannel跨页面通信解决了这个问题，满足了用户的支付需求，同时当前的操作页面不会刷新，用户体验更好</li></ul><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>BroadcastChannel同源策略下，可以浏览器跨页面通信</p></div><ul><li>1、通过<code>window.open(&#39;xxx&#39;, &#39;_blank&#39;)</code>,打开一个新的窗口方式，打开stripe支付链接</li><li>2、当前页面创建一个<code>BroadcastChannel</code>,监听<code>Message</code>消息</li><li>3、当支付完成后，stripe回跳指定的中间结果页面，通过<code>BroadcastChannel</code>,发送<code>postMessage</code>消息,并且通过<code> window.close()</code>关闭新窗口</li><li>4、用户还是停留在当前的页面，并且页面没有刷新</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_blank&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BroadcastChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;openask-deposite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;purchase-success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b页面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BroadcastChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;openask-deposite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;purchase-success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="broadcastchannel和postmessage区别" tabindex="-1">BroadcastChannel和postMessage区别 <a class="header-anchor" href="#broadcastchannel和postmessage区别" aria-label="Permalink to &quot;BroadcastChannel和postMessage区别&quot;">​</a></h2><ul><li>相同点：都可以实现跨页面通信</li><li>不同点： <ul><li>postMessage不受跨域的限制，点对点传递<code>一对一</code></li><li>BroadcastChannel必须同源策略下，类似广播传递<code>一对多</code></li></ul></li><li>适用场景：postMessage更加适合页面有父子关系的传输，比如内嵌入一个<code>iframe</code></li></ul>`,9)]))}const c=i(l,[["render",t]]);export{o as __pageData,c as default};
