import{_ as i,c as a,o as n,ao as h}from"./chunks/framework.DOhyS95j.js";const l="/handbook/assets/swap.BEm-t2_M.png",y=JSON.parse('{"title":"🔄 去中心化交易所（DEX）与自动化做市商（AMM）详解","description":"","frontmatter":{},"headers":[],"relativePath":"pages/blockchain/swap.md","filePath":"pages/blockchain/swap.md"}'),k={name:"pages/blockchain/swap.md"};function t(p,s,e,r,E,d){return n(),a("div",null,s[0]||(s[0]=[h('<p>好的，作为一名 Web3 开发者，我将为你深入剖析去中心化交易所（DEX）的核心机制，特别是自动化做市商（AMM）模型的兑换流程、收益分配和技术实现。</p><h1 id="🔄-去中心化交易所-dex-与自动化做市商-amm-详解" tabindex="-1">🔄 去中心化交易所（DEX）与自动化做市商（AMM）详解 <a class="header-anchor" href="#🔄-去中心化交易所-dex-与自动化做市商-amm-详解" aria-label="Permalink to &quot;🔄 去中心化交易所（DEX）与自动化做市商（AMM）详解&quot;">​</a></h1><h2 id="_1-⛓️-dex-与-amm-概述" tabindex="-1">1 ⛓️ DEX 与 AMM 概述 <a class="header-anchor" href="#_1-⛓️-dex-与-amm-概述" aria-label="Permalink to &quot;1 ⛓️ DEX 与 AMM 概述&quot;">​</a></h2><p>与传统中心化交易所（CEX）不同，DEX 允许用户<strong>直接从自己的钱包中进行点对点的资产兑换</strong>，无需注册、KYC 或将资产托管给第三方。其核心优势在于：</p><ul><li><strong>自我托管</strong>：用户始终掌握资产私钥，从根本上消除了交易所被盗或跑路的风险。</li><li><strong>无许可上币</strong>：任何项目都可以无需审核地创建交易对，提供了极大的开放性。</li><li><strong>抗审查性</strong>：任何人都无法单方面阻止某个地址进行交易。</li></ul><p>而 AMM 是当今 DEX 的<strong>核心技术引擎</strong>。它用智能合约和资金池取代了传统的订单簿。用户不再与交易对手匹配，而是与池中的流动性进行交互。</p><h2 id="_2-🔄-完整的兑换流程" tabindex="-1">2 🔄 完整的兑换流程 <a class="header-anchor" href="#_2-🔄-完整的兑换流程" aria-label="Permalink to &quot;2 🔄 完整的兑换流程&quot;">​</a></h2><p>一次典型的 DEX 兑换涉及用户、前端界面和多个智能合约的复杂交互。其核心流程和资金流向如下图所示：</p><p><img src="'+l+`" alt="swap"></p><h3 id="_2-1-用户交互与查询" tabindex="-1">2.1 用户交互与查询 <a class="header-anchor" href="#_2-1-用户交互与查询" aria-label="Permalink to &quot;2.1 用户交互与查询&quot;">​</a></h3><ol><li><strong>连接钱包</strong>：用户首先通过 Web3 钱包（如 MetaMask）连接至 DEX 前端界面。</li><li><strong>选择交易对和数量</strong>：用户选择想要卖出的代币（Input）和想要买入的代币（Output），并输入卖出数量。</li><li><strong>前端查询报价</strong>：前端界面会向智能合约查询这笔交易预计可得到的输出代币数量。这个过程是只读的，不消耗 Gas。 <ul><li>前端会调用路由合约的 <code>getAmountsOut</code> 函数，传入路径和输入数量，计算出输出数量。</li><li>同时，前端会从链上或自己的数据库中获取当前交易的<strong>滑点容忍度</strong>（Slippage Tolerance）和<strong>交易截止时间</strong>（Deadline）的默认值。</li></ul></li></ol><h3 id="_2-2-交易执行与结算" tabindex="-1">2.2 交易执行与结算 <a class="header-anchor" href="#_2-2-交易执行与结算" aria-label="Permalink to &quot;2.2 交易执行与结算&quot;">​</a></h3><ol><li><strong>用户确认</strong>：用户确认报价，并可以调整滑点容忍度和 Gas 费。较低的滑点容忍度可以防止大幅的价格波动，但也可能导致交易失败。</li><li><strong>交易签名</strong>：用户点击“Swap”，钱包会弹出请求签名的提示。用户签名后，交易被广播到区块链网络。</li><li><strong>智能合约执行</strong>： <ul><li><strong>路由合约（Router）</strong>：这是处理复杂交易的核心。它负责找到最佳兑换路径（例如，直接 USDC-&gt;ETH，或通过中间池 USDC-&gt;USDT-&gt;ETH）。</li><li><strong>资金池合约（Pair）</strong>：路由合约最终会调用目标资金池的 <code>swap</code> 函数。该函数会执行以下操作： <ul><li><strong>验证</strong>：检查交易是否满足预设条件（如未超过截止时间、输出代币数量大于用户设置的最小值）。</li><li><strong>计算</strong>：根据<strong>恒定乘积公式（x * y = k）</strong> 计算用户应收到的代币数量，并扣除手续费。</li><li><strong>更新储备金</strong>：减少输出代币的储备量，增加输入代币的储备量。</li><li><strong>转账</strong>：将输出代币发送到用户地址。</li></ul></li></ul></li><li><strong>交易完成</strong>：区块确认后，用户的钱包中会收到输出代币，前端界面会更新显示交易成功的状态。</li></ol><h2 id="_3-💰-收益与佣金分配机制" tabindex="-1">3 💰 收益与佣金分配机制 <a class="header-anchor" href="#_3-💰-收益与佣金分配机制" aria-label="Permalink to &quot;3 💰 收益与佣金分配机制&quot;">​</a></h2><p>在 AMM 模型中，收益主要来自于交易手续费，并由流动性提供者和协议平台共享。</p><h3 id="_3-1-用户的收益-流动性提供者-lps" tabindex="-1">3.1 用户的收益（流动性提供者 - LPs） <a class="header-anchor" href="#_3-1-用户的收益-流动性提供者-lps" aria-label="Permalink to &quot;3.1 用户的收益（流动性提供者 - LPs）&quot;">​</a></h3><p>普通交易用户没有直接收益，反而需要支付手续费。<strong>收益主要来自于为资金池提供流动性的用户，即流动性提供者（LPs）</strong>。</p><ul><li><strong>收益来源</strong>：<strong>交易手续费</strong>。每笔交易都会收取一定比例的费用（常见为 0.3%），这部分费用会直接添加到资金池的储备金中。</li><li><strong>收益计算</strong>：LP 的收益是其<strong>按份额占有的那部分手续费</strong>。 <ul><li>当你注入流动性时，你会获得<strong>LP 代币</strong>（如 UNI-V2），代表你在该资金池中的份额。</li><li>你的份额 = <code>(你提供的流动性数量) / (池中总流动性数量)</code></li><li>你的收益 = <code>总手续费收入 * 你的份额</code></li></ul></li><li><strong>无常损失（Impermanent Loss）</strong>：这是提供流动性时的主要风险。当两种代币的市场价格比率发生变化时，与简单持有代币相比，LP 可能会遭受损失。手续费收益就是对冲这一风险和激励 LP 提供流动性的补偿。</li></ul><h3 id="_3-2-平台的收益" tabindex="-1">3.2 平台的收益 <a class="header-anchor" href="#_3-2-平台的收益" aria-label="Permalink to &quot;3.2 平台的收益&quot;">​</a></h3><p>协议的收益（佣金）是通过从总手续费中抽成来实现的。</p><ul><li><strong>手续费抽成（Fee Take）</strong>：这是最主流的方式。协议不会额外收费，而是<strong>从 LP 应得的手续费中抽取一部分</strong>。例如： <ul><li>总交易手续费率为：<strong>0.3%</strong></li><li>其中，<strong>0.25%</strong> 分配给所有 LP。</li><li>另外 <strong>0.05%</strong> 则转入协议的<strong>国库地址（Treasury）</strong> 作为平台收入。</li></ul></li><li><strong>其他模式</strong>： <ul><li><strong>原生代币回购与销毁</strong>：部分协议（如 PancakeSwap）会使用部分平台收入在公开市场上回购并销毁其原生代币（如 CAKE），创造通缩压力。</li><li><strong>治理与激励</strong>：平台收入可以用于资助生态开发、市场推广，或作为激励分配给质押了平台治理代币的用户。</li></ul></li></ul><h3 id="_3-3-佣金分配案例" tabindex="-1">3.3 佣金分配案例 <a class="header-anchor" href="#_3-3-佣金分配案例" aria-label="Permalink to &quot;3.3 佣金分配案例&quot;">​</a></h3><p>假设一个 USDC/ETH 池：</p><ul><li><strong>总流动性</strong>：$1,000,000</li><li><strong>每日交易量</strong>：$10,000,000</li><li><strong>总手续费率</strong>：0.3%</li><li><strong>协议抽成率</strong>：0.05% (即总手续费的 1/6)</li><li><strong>LP 手续费率</strong>：0.25%</li></ul><p><strong>每日手续费总收入</strong>： $10,000,000 * 0.3% = <strong>$30,000</strong></p><p><strong>平台每日佣金收入</strong>： $10,000,000 _ 0.05% = <strong>$5,000</strong> (或 $30,000 _ (1/6) = $5,000)</p><p><strong>LP 每日总收益</strong>： $10,000,000 _ 0.25% = <strong>$25,000</strong> (或 $30,000 _ (5/6) = $25,000)</p><p>如果一个 LP 提供了该池总流动性 1%的资产（价值$10,000），那么他每日可以分得： $25,000 * 1% = <strong>$25</strong> 的手续费收益。</p><h2 id="_4-⚙️-技术实现-前后端与智能合约" tabindex="-1">4 ⚙️ 技术实现：前后端与智能合约 <a class="header-anchor" href="#_4-⚙️-技术实现-前后端与智能合约" aria-label="Permalink to &quot;4 ⚙️ 技术实现：前后端与智能合约&quot;">​</a></h2><h3 id="_4-1-智能合约开发" tabindex="-1">4.1 智能合约开发 <a class="header-anchor" href="#_4-1-智能合约开发" aria-label="Permalink to &quot;4.1 智能合约开发&quot;">​</a></h3><p>DEX 的核心是经过审计的、gas 优化的智能合约。通常采用 Uniswap V2 的架构作为基础。</p><h4 id="_4-1-1-核心合约结构" tabindex="-1">4.1.1 核心合约结构 <a class="header-anchor" href="#_4-1-1-核心合约结构" aria-label="Permalink to &quot;4.1.1 核心合约结构&quot;">​</a></h4><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ^0.8.19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 核心配对合约（代表一个交易对，如USDC/ETH）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniswapV2Pair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token0;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    uint112</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserve0;           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代币0的储备量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    uint112</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserve1;           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代币1的储备量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    uint32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blockTimestampLast; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最后更新时间戳</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalSupply; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// LP代币总供应量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balanceOf; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// LP代币余额</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 恒定乘积公式计算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAmountOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amountIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tokenIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amountOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amountInWithFee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amountIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 997</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 扣除0.3%手续费</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numerator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amountInWithFee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tokenIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserve1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserve0);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> denominator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tokenIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserve0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserve1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amountInWithFee;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amountOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numerator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> denominator;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 兑换函数（外部由路由合约调用）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amount0Out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amount1Out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 安全检查...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2. 从合约中转出输出代币给用户 \`to\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 3. 更新储备金</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(balance0, balance1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更新储备金</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> balance0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> balance1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        reserve0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uint112</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(balance0);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        reserve1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uint112</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(balance1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        blockTimestampLast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.timestamp);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        emit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reserve0, reserve1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 触发同步事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 工厂合约（创建和管理所有交易对）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniswapV2Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getPair;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allPairs;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> feeTo; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 协议收费地址</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tokenA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> tokenB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> returns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建新的Pair合约</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytecode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UniswapV2Pair).creationCode;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        bytes32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keccak256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">abi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodePacked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokenA, tokenB));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pair </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytecode, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytecode), salt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        UniswapV2Pair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pair).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokenA, tokenB);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        getPair[tokenA][tokenB] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pair;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        getPair[tokenB][tokenA] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pair;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        allPairs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pair);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路由合约（处理复杂交易和路由）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">contract</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniswapV2Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> swapExactTokensForTokens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amountIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amountOutMin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最小输出数量（防滑点）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">calldata</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 兑换路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        address</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> deadline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ensure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deadline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">returns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">memory</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 计算路径中每一步的预期输出量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAmountsOut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amountIn, path);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amounts[amounts.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amountOutMin, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Router: INSUFFICIENT_OUTPUT_AMOUNT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2. 将用户的输入代币转入第一个Pair合约</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        TransferHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeTransferFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            path[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">msg.sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, UniswapV2Library.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pairFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory, path[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], path[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]), amounts[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 3. 循环调用路径上的每一个Pair合约进行兑换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amounts, path, to);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">memory</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> amounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">memory</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _to) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (path[i], path[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token0,) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UniswapV2Library.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortTokens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, output);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amountOut </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amounts[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount0Out, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount1Out) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), amountOut) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (amountOut, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UniswapV2Library.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pairFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory, output, path[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _to;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            IUniswapV2Pair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UniswapV2Library.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pairFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory, input, output)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                amount0Out, amount1Out, to, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_4-1-2-安全与优化考量" tabindex="-1">4.1.2 安全与优化考量 <a class="header-anchor" href="#_4-1-2-安全与优化考量" aria-label="Permalink to &quot;4.1.2 安全与优化考量&quot;">​</a></h4><ul><li><strong>重入攻击防护</strong>：在关键函数中使用<code>nonReentrant</code>修饰符（如来自 OpenZeppelin 的<code>ReentrancyGuard</code>）。</li><li><strong>精度处理</strong>：妥善处理不同代币的<code>decimals</code>差异，使用足够的精度进行数学运算（通常乘以<code>1e18</code>）。</li><li><strong>闪电贷</strong>：AMM 本身支持闪电贷。<code>swap</code>函数不需要特殊的闪电贷代码，但需确保在所有外部调用之前完成状态更新。</li><li><strong>Gas 优化</strong>：使用<code>create2</code>部署 Pair 合约、使用<code>uint112</code>存储储备金以优化存储布局。</li></ul><h3 id="_4-2-后端开发" tabindex="-1">4.2 后端开发 <a class="header-anchor" href="#_4-2-后端开发" aria-label="Permalink to &quot;4.2 后端开发&quot;">​</a></h3><p>后端主要负责提供链下数据索引和 API，以增强前端体验。</p><ul><li><strong>技术栈</strong>：Node.js + Express/NestJS, PostgreSQL, Redis。</li><li><strong>核心任务</strong>： <ul><li><strong>事件监听与索引</strong>：使用<code>Ethers.js</code>监听链上事件（<code>Swap</code>, <code>Mint</code>, <code>Burn</code>, <code>Sync</code>），将交易、池子、用户余额等数据存入数据库。</li><li><strong>计算聚合数据</strong>：计算并缓存全局数据，如总锁仓量（TVL）、24 小时交易量、热门交易对、代币价格等。</li><li><strong>提供 API</strong>： <ul><li><code>GET /pairs</code>: 返回所有交易对列表及其数据。</li><li><code>GET /pairs/:address</code>: 返回特定交易对的详细数据。</li><li><code>GET /pairs/:address/transactions</code>: 返回交易对的最近交易记录。</li></ul></li><li><strong>获取代币元数据</strong>：从链上或第三方服务获取代币的图标、名称、符号等信息。</li></ul></li></ul><h3 id="_4-3-前端开发" tabindex="-1">4.3 前端开发 <a class="header-anchor" href="#_4-3-前端开发" aria-label="Permalink to &quot;4.3 前端开发&quot;">​</a></h3><p>前端是用户直接交互的界面，需要直观、响应快且安全。</p><ul><li><strong>技术栈</strong>：React + Vite, Ethers.js, Web3Modal (用于钱包连接), Chart.js (用于显示价格图表)。</li><li><strong>核心功能</strong>： <ul><li><strong>钱包连接</strong>：集成多种钱包（MetaMask, WalletConnect, Coinbase Wallet）。</li><li><strong>数据展示</strong>：从后端 API 和链上合约获取数据，展示代币价格、池子流动性、24 小时成交量、历史图表等。</li><li><strong>兑换界面</strong>： <ul><li>实时获取和显示报价。</li><li>允许用户设置滑点容忍度和交易截止时间。</li><li>显示预估的 Gas 费用。</li></ul></li><li><strong>流动性管理界面</strong>：允许用户添加/移除流动性，并直观地显示他们的头寸和累计费用。</li><li><strong>交易状态跟踪</strong>：显示交易状态，并提供区块链浏览器的链接。</li></ul></li></ul>`,41)]))}const o=i(k,[["render",t]]);export{y as __pageData,o as default};
