import{_ as s,c as a,o as l,O as n}from"./chunks/framework.a45091be.js";const u=JSON.parse('{"title":"第二章｜HTML中的JavaScript","description":"记录JavaScript高级程序设计的学习过程","frontmatter":{"title":"第二章｜HTML中的JavaScript","description":"记录JavaScript高级程序设计的学习过程"},"headers":[],"relativePath":"pages/advancedProgramming/chapterTwo.md","lastUpdated":1700993962000}'),o={name:"pages/advancedProgramming/chapterTwo.md"},p=n(`<h2 id="script元素" tabindex="-1">script元素 <a class="header-anchor" href="#script元素" aria-label="Permalink to &quot;script元素&quot;">​</a></h2><ul><li>script元素可以包含在head元素中，也可以包含在body元素中，默认情况下是script<code>同步加载</code>、<code>同步执行</code>，等待执行完毕后，后面的才能开始执行</li></ul><h2 id="script-src遇上内联代码" tabindex="-1">script src遇上内联代码 <a class="header-anchor" href="#script-src遇上内联代码" aria-label="Permalink to &quot;script src遇上内联代码&quot;">​</a></h2><ul><li>如果有script标记有src属性，script开始到结束标签<code>内部的代码不会执行</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// demo.js</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&quot;Hello World!&quot;);</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出结果：demo</span></span></code></pre></div><h2 id="script异步加载" tabindex="-1">script异步加载 <a class="header-anchor" href="#script异步加载" aria-label="Permalink to &quot;script异步加载&quot;">​</a></h2><ul><li>defer属性，可以让script元素<code>异步加载</code>、加载完成后<code>不会立马执行</code>，这个脚本会等待<code>整个页面解析之后</code>在运用，并且在<code>DOMContentLoaded</code>事件之前执行，如有多个defer加载的脚本会按照<code>加载顺序依次执行</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 比如说example1.js加载5秒种，example2.js加载2秒钟</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// example2会等待example1加载完并且执行后，在执行example2</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">defer</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example1.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">defer</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example2.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li>async属性，可以让script元素<code>异步加载</code>、加载完成后<code>立马执行</code>这个脚本，如有多个async加载的脚本无法保证他们的执行顺序</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 如有多个async加载的脚本无法保证他们的执行顺序</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example1.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example2.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="noscript标签" tabindex="-1">noscript标签 <a class="header-anchor" href="#noscript标签" aria-label="Permalink to &quot;noscript标签&quot;">​</a></h2><ul><li>noscript标签，当浏览器不支持script标签时，会显示noscript标签内的内容</li></ul>`,12),e=[p];function t(c,r,i,D,F,y){return l(),a("div",null,e)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
